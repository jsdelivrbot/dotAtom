(function() {
  var TagView, cwd, git, repo;

  git = require('../../lib/git');

  repo = require('../fixtures').repo;

  TagView = require('../../lib/views/tag-view');

  cwd = repo.getWorkingDirectory();

  describe("TagView", function() {
    beforeEach(function() {
      this.tag = 'tag1';
      return this.view = new TagView(repo, this.tag);
    });
    it("displays 5 commands for the tag", function() {
      return expect(this.view.items.length).toBe(5);
    });
    it("gets the remotes to push to when the push command is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('remotes');
      });
      this.view.confirmed(this.view.items[1]);
      return expect(git.cmd).toHaveBeenCalledWith(['remote'], {
        cwd: cwd
      });
    });
    it("calls git.cmd with 'checkout' to checkout the tag when checkout is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('success');
      });
      this.view.confirmed(this.view.items[2]);
      return expect(git.cmd).toHaveBeenCalledWith(['checkout', this.tag], {
        cwd: cwd
      });
    });
    it("calls git.cmd with 'verify' when verify is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('success');
      });
      this.view.confirmed(this.view.items[3]);
      return expect(git.cmd).toHaveBeenCalledWith(['tag', '--verify', this.tag], {
        cwd: cwd
      });
    });
    return it("calls git.cmd with 'delete' when delete is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('success');
      });
      this.view.confirmed(this.view.items[4]);
      return expect(git.cmd).toHaveBeenCalledWith(['tag', '--delete', this.tag], {
        cwd: cwd
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2xyYW1pcmV6Ly5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL3NwZWMvdmlld3MvdGFnLXZpZXctc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsZUFBUjs7RUFDTCxPQUFRLE9BQUEsQ0FBUSxhQUFSOztFQUNULE9BQUEsR0FBVSxPQUFBLENBQVEsMEJBQVI7O0VBRVYsR0FBQSxHQUFNLElBQUksQ0FBQyxtQkFBTCxDQUFBOztFQUVOLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7SUFDbEIsVUFBQSxDQUFXLFNBQUE7TUFDVCxJQUFDLENBQUEsR0FBRCxHQUFPO2FBQ1AsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBQyxDQUFBLEdBQWY7SUFGSCxDQUFYO0lBSUEsRUFBQSxDQUFHLGlDQUFILEVBQXNDLFNBQUE7YUFDcEMsTUFBQSxDQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQW5CLENBQTBCLENBQUMsSUFBM0IsQ0FBZ0MsQ0FBaEM7SUFEb0MsQ0FBdEM7SUFHQSxFQUFBLENBQUcsK0RBQUgsRUFBb0UsU0FBQTtNQUNsRSxLQUFBLENBQU0sR0FBTixFQUFXLEtBQVgsQ0FBaUIsQ0FBQyxXQUFsQixDQUE4QixTQUFBO2VBQUcsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsU0FBaEI7TUFBSCxDQUE5QjtNQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBTixDQUFnQixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQTVCO2FBQ0EsTUFBQSxDQUFPLEdBQUcsQ0FBQyxHQUFYLENBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsQ0FBQyxRQUFELENBQXJDLEVBQWlEO1FBQUMsS0FBQSxHQUFEO09BQWpEO0lBSGtFLENBQXBFO0lBS0EsRUFBQSxDQUFHLDZFQUFILEVBQWtGLFNBQUE7TUFDaEYsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsV0FBbEIsQ0FBOEIsU0FBQTtlQUFHLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQWhCO01BQUgsQ0FBOUI7TUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBZ0IsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUE1QjthQUNBLE1BQUEsQ0FBTyxHQUFHLENBQUMsR0FBWCxDQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQUMsVUFBRCxFQUFhLElBQUMsQ0FBQSxHQUFkLENBQXJDLEVBQXlEO1FBQUMsS0FBQSxHQUFEO09BQXpEO0lBSGdGLENBQWxGO0lBS0EsRUFBQSxDQUFHLHFEQUFILEVBQTBELFNBQUE7TUFDeEQsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsV0FBbEIsQ0FBOEIsU0FBQTtlQUFHLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQWhCO01BQUgsQ0FBOUI7TUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBZ0IsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUE1QjthQUNBLE1BQUEsQ0FBTyxHQUFHLENBQUMsR0FBWCxDQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQUMsS0FBRCxFQUFRLFVBQVIsRUFBb0IsSUFBQyxDQUFBLEdBQXJCLENBQXJDLEVBQWdFO1FBQUMsS0FBQSxHQUFEO09BQWhFO0lBSHdELENBQTFEO1dBS0EsRUFBQSxDQUFHLHFEQUFILEVBQTBELFNBQUE7TUFDeEQsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsV0FBbEIsQ0FBOEIsU0FBQTtlQUFHLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQWhCO01BQUgsQ0FBOUI7TUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBZ0IsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUE1QjthQUNBLE1BQUEsQ0FBTyxHQUFHLENBQUMsR0FBWCxDQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQUMsS0FBRCxFQUFRLFVBQVIsRUFBb0IsSUFBQyxDQUFBLEdBQXJCLENBQXJDLEVBQWdFO1FBQUMsS0FBQSxHQUFEO09BQWhFO0lBSHdELENBQTFEO0VBdkJrQixDQUFwQjtBQU5BIiwic291cmNlc0NvbnRlbnQiOlsiZ2l0ID0gcmVxdWlyZSAnLi4vLi4vbGliL2dpdCdcbntyZXBvfSA9IHJlcXVpcmUgJy4uL2ZpeHR1cmVzJ1xuVGFnVmlldyA9IHJlcXVpcmUgJy4uLy4uL2xpYi92aWV3cy90YWctdmlldydcblxuY3dkID0gcmVwby5nZXRXb3JraW5nRGlyZWN0b3J5KClcblxuZGVzY3JpYmUgXCJUYWdWaWV3XCIsIC0+XG4gIGJlZm9yZUVhY2ggLT5cbiAgICBAdGFnID0gJ3RhZzEnXG4gICAgQHZpZXcgPSBuZXcgVGFnVmlldyhyZXBvLCBAdGFnKVxuXG4gIGl0IFwiZGlzcGxheXMgNSBjb21tYW5kcyBmb3IgdGhlIHRhZ1wiLCAtPlxuICAgIGV4cGVjdChAdmlldy5pdGVtcy5sZW5ndGgpLnRvQmUgNVxuXG4gIGl0IFwiZ2V0cyB0aGUgcmVtb3RlcyB0byBwdXNoIHRvIHdoZW4gdGhlIHB1c2ggY29tbWFuZCBpcyBzZWxlY3RlZFwiLCAtPlxuICAgIHNweU9uKGdpdCwgJ2NtZCcpLmFuZENhbGxGYWtlIC0+IFByb21pc2UucmVzb2x2ZSAncmVtb3RlcydcbiAgICBAdmlldy5jb25maXJtZWQoQHZpZXcuaXRlbXNbMV0pXG4gICAgZXhwZWN0KGdpdC5jbWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoIFsncmVtb3RlJ10sIHtjd2R9XG5cbiAgaXQgXCJjYWxscyBnaXQuY21kIHdpdGggJ2NoZWNrb3V0JyB0byBjaGVja291dCB0aGUgdGFnIHdoZW4gY2hlY2tvdXQgaXMgc2VsZWN0ZWRcIiwgLT5cbiAgICBzcHlPbihnaXQsICdjbWQnKS5hbmRDYWxsRmFrZSAtPiBQcm9taXNlLnJlc29sdmUgJ3N1Y2Nlc3MnXG4gICAgQHZpZXcuY29uZmlybWVkKEB2aWV3Lml0ZW1zWzJdKVxuICAgIGV4cGVjdChnaXQuY21kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCBbJ2NoZWNrb3V0JywgQHRhZ10sIHtjd2R9XG5cbiAgaXQgXCJjYWxscyBnaXQuY21kIHdpdGggJ3ZlcmlmeScgd2hlbiB2ZXJpZnkgaXMgc2VsZWN0ZWRcIiwgLT5cbiAgICBzcHlPbihnaXQsICdjbWQnKS5hbmRDYWxsRmFrZSAtPiBQcm9taXNlLnJlc29sdmUgJ3N1Y2Nlc3MnXG4gICAgQHZpZXcuY29uZmlybWVkKEB2aWV3Lml0ZW1zWzNdKVxuICAgIGV4cGVjdChnaXQuY21kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCBbJ3RhZycsICctLXZlcmlmeScsIEB0YWddLCB7Y3dkfVxuXG4gIGl0IFwiY2FsbHMgZ2l0LmNtZCB3aXRoICdkZWxldGUnIHdoZW4gZGVsZXRlIGlzIHNlbGVjdGVkXCIsIC0+XG4gICAgc3B5T24oZ2l0LCAnY21kJykuYW5kQ2FsbEZha2UgLT4gUHJvbWlzZS5yZXNvbHZlICdzdWNjZXNzJ1xuICAgIEB2aWV3LmNvbmZpcm1lZChAdmlldy5pdGVtc1s0XSlcbiAgICBleHBlY3QoZ2l0LmNtZCkudG9IYXZlQmVlbkNhbGxlZFdpdGggWyd0YWcnLCAnLS1kZWxldGUnLCBAdGFnXSwge2N3ZH1cbiJdfQ==
