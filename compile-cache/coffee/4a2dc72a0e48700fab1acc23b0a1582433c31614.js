(function() {
  var MarkdownLists;

  MarkdownLists = require('../lib/markdown-lists');

  describe("MarkdownLists", function() {
    var activationPromise, ref, workspaceElement;
    ref = [], workspaceElement = ref[0], activationPromise = ref[1];
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      return activationPromise = atom.packages.activatePackage('markdown-lists');
    });
    return describe("when the markdown-lists:toggle event is triggered", function() {
      it("hides and shows the modal panel", function() {
        expect(workspaceElement.querySelector('.markdown-lists')).not.toExist();
        atom.commands.dispatch(workspaceElement, 'markdown-lists:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var markdownListsElement, markdownListsPanel;
          expect(workspaceElement.querySelector('.markdown-lists')).toExist();
          markdownListsElement = workspaceElement.querySelector('.markdown-lists');
          expect(markdownListsElement).toExist();
          markdownListsPanel = atom.workspace.panelForItem(markdownListsElement);
          expect(markdownListsPanel.isVisible()).toBe(true);
          atom.commands.dispatch(workspaceElement, 'markdown-lists:toggle');
          return expect(markdownListsPanel.isVisible()).toBe(false);
        });
      });
      return it("hides and shows the view", function() {
        jasmine.attachToDOM(workspaceElement);
        expect(workspaceElement.querySelector('.markdown-lists')).not.toExist();
        atom.commands.dispatch(workspaceElement, 'markdown-lists:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var markdownListsElement;
          markdownListsElement = workspaceElement.querySelector('.markdown-lists');
          expect(markdownListsElement).toBeVisible();
          atom.commands.dispatch(workspaceElement, 'markdown-lists:toggle');
          return expect(markdownListsElement).not.toBeVisible();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2xyYW1pcmV6Ly5hdG9tL3BhY2thZ2VzL21hcmtkb3duLWxpc3RzL3NwZWMvbWFya2Rvd24tbGlzdHMtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLGFBQUEsR0FBZ0IsT0FBQSxDQUFRLHVCQUFSOztFQU9oQixRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBO0FBQ3hCLFFBQUE7SUFBQSxNQUF3QyxFQUF4QyxFQUFDLHlCQUFELEVBQW1CO0lBRW5CLFVBQUEsQ0FBVyxTQUFBO01BQ1QsZ0JBQUEsR0FBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFYLENBQW1CLElBQUksQ0FBQyxTQUF4QjthQUNuQixpQkFBQSxHQUFvQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWQsQ0FBOEIsZ0JBQTlCO0lBRlgsQ0FBWDtXQUlBLFFBQUEsQ0FBUyxtREFBVCxFQUE4RCxTQUFBO01BQzVELEVBQUEsQ0FBRyxpQ0FBSCxFQUFzQyxTQUFBO1FBR3BDLE1BQUEsQ0FBTyxnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQixpQkFBL0IsQ0FBUCxDQUF5RCxDQUFDLEdBQUcsQ0FBQyxPQUE5RCxDQUFBO1FBSUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFkLENBQXVCLGdCQUF2QixFQUF5Qyx1QkFBekM7UUFFQSxlQUFBLENBQWdCLFNBQUE7aUJBQ2Q7UUFEYyxDQUFoQjtlQUdBLElBQUEsQ0FBSyxTQUFBO0FBQ0gsY0FBQTtVQUFBLE1BQUEsQ0FBTyxnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQixpQkFBL0IsQ0FBUCxDQUF5RCxDQUFDLE9BQTFELENBQUE7VUFFQSxvQkFBQSxHQUF1QixnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQixpQkFBL0I7VUFDdkIsTUFBQSxDQUFPLG9CQUFQLENBQTRCLENBQUMsT0FBN0IsQ0FBQTtVQUVBLGtCQUFBLEdBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBZixDQUE0QixvQkFBNUI7VUFDckIsTUFBQSxDQUFPLGtCQUFrQixDQUFDLFNBQW5CLENBQUEsQ0FBUCxDQUFzQyxDQUFDLElBQXZDLENBQTRDLElBQTVDO1VBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFkLENBQXVCLGdCQUF2QixFQUF5Qyx1QkFBekM7aUJBQ0EsTUFBQSxDQUFPLGtCQUFrQixDQUFDLFNBQW5CLENBQUEsQ0FBUCxDQUFzQyxDQUFDLElBQXZDLENBQTRDLEtBQTVDO1FBVEcsQ0FBTDtNQVpvQyxDQUF0QzthQXVCQSxFQUFBLENBQUcsMEJBQUgsRUFBK0IsU0FBQTtRQU83QixPQUFPLENBQUMsV0FBUixDQUFvQixnQkFBcEI7UUFFQSxNQUFBLENBQU8sZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsaUJBQS9CLENBQVAsQ0FBeUQsQ0FBQyxHQUFHLENBQUMsT0FBOUQsQ0FBQTtRQUlBLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBZCxDQUF1QixnQkFBdkIsRUFBeUMsdUJBQXpDO1FBRUEsZUFBQSxDQUFnQixTQUFBO2lCQUNkO1FBRGMsQ0FBaEI7ZUFHQSxJQUFBLENBQUssU0FBQTtBQUVILGNBQUE7VUFBQSxvQkFBQSxHQUF1QixnQkFBZ0IsQ0FBQyxhQUFqQixDQUErQixpQkFBL0I7VUFDdkIsTUFBQSxDQUFPLG9CQUFQLENBQTRCLENBQUMsV0FBN0IsQ0FBQTtVQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBZCxDQUF1QixnQkFBdkIsRUFBeUMsdUJBQXpDO2lCQUNBLE1BQUEsQ0FBTyxvQkFBUCxDQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFqQyxDQUFBO1FBTEcsQ0FBTDtNQWxCNkIsQ0FBL0I7SUF4QjRELENBQTlEO0VBUHdCLENBQTFCO0FBUEEiLCJzb3VyY2VzQ29udGVudCI6WyJNYXJrZG93bkxpc3RzID0gcmVxdWlyZSAnLi4vbGliL21hcmtkb3duLWxpc3RzJ1xuXG4jIFVzZSB0aGUgY29tbWFuZCBgd2luZG93OnJ1bi1wYWNrYWdlLXNwZWNzYCAoY21kLWFsdC1jdHJsLXApIHRvIHJ1biBzcGVjcy5cbiNcbiMgVG8gcnVuIGEgc3BlY2lmaWMgYGl0YCBvciBgZGVzY3JpYmVgIGJsb2NrIGFkZCBhbiBgZmAgdG8gdGhlIGZyb250IChlLmcuIGBmaXRgXG4jIG9yIGBmZGVzY3JpYmVgKS4gUmVtb3ZlIHRoZSBgZmAgdG8gdW5mb2N1cyB0aGUgYmxvY2suXG5cbmRlc2NyaWJlIFwiTWFya2Rvd25MaXN0c1wiLCAtPlxuICBbd29ya3NwYWNlRWxlbWVudCwgYWN0aXZhdGlvblByb21pc2VdID0gW11cblxuICBiZWZvcmVFYWNoIC0+XG4gICAgd29ya3NwYWNlRWxlbWVudCA9IGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSlcbiAgICBhY3RpdmF0aW9uUHJvbWlzZSA9IGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKCdtYXJrZG93bi1saXN0cycpXG5cbiAgZGVzY3JpYmUgXCJ3aGVuIHRoZSBtYXJrZG93bi1saXN0czp0b2dnbGUgZXZlbnQgaXMgdHJpZ2dlcmVkXCIsIC0+XG4gICAgaXQgXCJoaWRlcyBhbmQgc2hvd3MgdGhlIG1vZGFsIHBhbmVsXCIsIC0+XG4gICAgICAjIEJlZm9yZSB0aGUgYWN0aXZhdGlvbiBldmVudCB0aGUgdmlldyBpcyBub3Qgb24gdGhlIERPTSwgYW5kIG5vIHBhbmVsXG4gICAgICAjIGhhcyBiZWVuIGNyZWF0ZWRcbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYXJrZG93bi1saXN0cycpKS5ub3QudG9FeGlzdCgpXG5cbiAgICAgICMgVGhpcyBpcyBhbiBhY3RpdmF0aW9uIGV2ZW50LCB0cmlnZ2VyaW5nIGl0IHdpbGwgY2F1c2UgdGhlIHBhY2thZ2UgdG8gYmVcbiAgICAgICMgYWN0aXZhdGVkLlxuICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCB3b3Jrc3BhY2VFbGVtZW50LCAnbWFya2Rvd24tbGlzdHM6dG9nZ2xlJ1xuXG4gICAgICB3YWl0c0ZvclByb21pc2UgLT5cbiAgICAgICAgYWN0aXZhdGlvblByb21pc2VcblxuICAgICAgcnVucyAtPlxuICAgICAgICBleHBlY3Qod29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubWFya2Rvd24tbGlzdHMnKSkudG9FeGlzdCgpXG5cbiAgICAgICAgbWFya2Rvd25MaXN0c0VsZW1lbnQgPSB3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYXJrZG93bi1saXN0cycpXG4gICAgICAgIGV4cGVjdChtYXJrZG93bkxpc3RzRWxlbWVudCkudG9FeGlzdCgpXG5cbiAgICAgICAgbWFya2Rvd25MaXN0c1BhbmVsID0gYXRvbS53b3Jrc3BhY2UucGFuZWxGb3JJdGVtKG1hcmtkb3duTGlzdHNFbGVtZW50KVxuICAgICAgICBleHBlY3QobWFya2Rvd25MaXN0c1BhbmVsLmlzVmlzaWJsZSgpKS50b0JlIHRydWVcbiAgICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCB3b3Jrc3BhY2VFbGVtZW50LCAnbWFya2Rvd24tbGlzdHM6dG9nZ2xlJ1xuICAgICAgICBleHBlY3QobWFya2Rvd25MaXN0c1BhbmVsLmlzVmlzaWJsZSgpKS50b0JlIGZhbHNlXG5cbiAgICBpdCBcImhpZGVzIGFuZCBzaG93cyB0aGUgdmlld1wiLCAtPlxuICAgICAgIyBUaGlzIHRlc3Qgc2hvd3MgeW91IGFuIGludGVncmF0aW9uIHRlc3QgdGVzdGluZyBhdCB0aGUgdmlldyBsZXZlbC5cblxuICAgICAgIyBBdHRhY2hpbmcgdGhlIHdvcmtzcGFjZUVsZW1lbnQgdG8gdGhlIERPTSBpcyByZXF1aXJlZCB0byBhbGxvdyB0aGVcbiAgICAgICMgYHRvQmVWaXNpYmxlKClgIG1hdGNoZXJzIHRvIHdvcmsuIEFueXRoaW5nIHRlc3RpbmcgdmlzaWJpbGl0eSBvciBmb2N1c1xuICAgICAgIyByZXF1aXJlcyB0aGF0IHRoZSB3b3Jrc3BhY2VFbGVtZW50IGlzIG9uIHRoZSBET00uIFRlc3RzIHRoYXQgYXR0YWNoIHRoZVxuICAgICAgIyB3b3Jrc3BhY2VFbGVtZW50IHRvIHRoZSBET00gYXJlIGdlbmVyYWxseSBzbG93ZXIgdGhhbiB0aG9zZSBvZmYgRE9NLlxuICAgICAgamFzbWluZS5hdHRhY2hUb0RPTSh3b3Jrc3BhY2VFbGVtZW50KVxuXG4gICAgICBleHBlY3Qod29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubWFya2Rvd24tbGlzdHMnKSkubm90LnRvRXhpc3QoKVxuXG4gICAgICAjIFRoaXMgaXMgYW4gYWN0aXZhdGlvbiBldmVudCwgdHJpZ2dlcmluZyBpdCBjYXVzZXMgdGhlIHBhY2thZ2UgdG8gYmVcbiAgICAgICMgYWN0aXZhdGVkLlxuICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCB3b3Jrc3BhY2VFbGVtZW50LCAnbWFya2Rvd24tbGlzdHM6dG9nZ2xlJ1xuXG4gICAgICB3YWl0c0ZvclByb21pc2UgLT5cbiAgICAgICAgYWN0aXZhdGlvblByb21pc2VcblxuICAgICAgcnVucyAtPlxuICAgICAgICAjIE5vdyB3ZSBjYW4gdGVzdCBmb3IgdmlldyB2aXNpYmlsaXR5XG4gICAgICAgIG1hcmtkb3duTGlzdHNFbGVtZW50ID0gd29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubWFya2Rvd24tbGlzdHMnKVxuICAgICAgICBleHBlY3QobWFya2Rvd25MaXN0c0VsZW1lbnQpLnRvQmVWaXNpYmxlKClcbiAgICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCB3b3Jrc3BhY2VFbGVtZW50LCAnbWFya2Rvd24tbGlzdHM6dG9nZ2xlJ1xuICAgICAgICBleHBlY3QobWFya2Rvd25MaXN0c0VsZW1lbnQpLm5vdC50b0JlVmlzaWJsZSgpXG4iXX0=
