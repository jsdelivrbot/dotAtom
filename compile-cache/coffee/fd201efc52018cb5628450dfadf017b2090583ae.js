(function() {
  var SelectStageFiles, git, pathToRepoFile, ref, repo, stagedFile, unstagedFile;

  git = require('../../lib/git');

  SelectStageFiles = require('../../lib/views/select-stage-files-view-beta');

  ref = require('../fixtures'), repo = ref.repo, pathToRepoFile = ref.pathToRepoFile;

  stagedFile = {
    staged: true,
    path: pathToRepoFile + '1'
  };

  unstagedFile = {
    staged: false,
    path: pathToRepoFile
  };

  describe("SelectStageFiles", function() {
    it("renders staged files with the css class 'active'", function() {
      var view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [stagedFile, unstagedFile]);
      return expect(view.find('li.active').length).toBe(1);
    });
    it("toggles staged files and their css class of 'active'", function() {
      var selectedItem, view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [stagedFile, unstagedFile]);
      expect(view.find('li.active').length).toBe(1);
      selectedItem = view.getSelectedItem();
      while (!selectedItem.staged) {
        selectedItem = view.selectNextItemView();
      }
      view.confirmed(selectedItem, view.getSelectedItemView());
      return expect(view.find('li.active').length).toBe(0);
    });
    it("stages the selected files", function() {
      var view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [unstagedFile]);
      view.confirmSelection();
      view.find('.btn-apply-button').click();
      return expect(git.cmd).toHaveBeenCalledWith(['add', '-f', unstagedFile.path], {
        cwd: repo.getWorkingDirectory()
      });
    });
    return it("unstages the selected files", function() {
      var view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [stagedFile]);
      view.find('.btn-apply-button').click();
      return expect(git.cmd).toHaveBeenCalledWith(['reset', 'HEAD', '--', stagedFile.path], {
        cwd: repo.getWorkingDirectory()
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2xyYW1pcmV6Ly5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL3NwZWMvdmlld3Mvc2VsZWN0LXN0YWdlLWZpbGVzLXZpZXctYmV0YS1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxlQUFSOztFQUNOLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSw4Q0FBUjs7RUFFbkIsTUFBeUIsT0FBQSxDQUFRLGFBQVIsQ0FBekIsRUFBQyxlQUFELEVBQU87O0VBQ1AsVUFBQSxHQUNFO0lBQUEsTUFBQSxFQUFRLElBQVI7SUFDQSxJQUFBLEVBQU0sY0FBQSxHQUFpQixHQUR2Qjs7O0VBRUYsWUFBQSxHQUNFO0lBQUEsTUFBQSxFQUFRLEtBQVI7SUFDQSxJQUFBLEVBQU0sY0FETjs7O0VBR0YsUUFBQSxDQUFTLGtCQUFULEVBQTZCLFNBQUE7SUFDM0IsRUFBQSxDQUFHLGtEQUFILEVBQXVELFNBQUE7QUFDckQsVUFBQTtNQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsS0FBWCxDQUFpQixDQUFDLFNBQWxCLENBQTRCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLEVBQWhCLENBQTVCO01BQ0EsSUFBQSxHQUFXLElBQUEsZ0JBQUEsQ0FBaUIsSUFBakIsRUFBdUIsQ0FBQyxVQUFELEVBQWEsWUFBYixDQUF2QjthQUNYLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLFdBQVYsQ0FBc0IsQ0FBQyxNQUE5QixDQUFxQyxDQUFDLElBQXRDLENBQTJDLENBQTNDO0lBSHFELENBQXZEO0lBS0EsRUFBQSxDQUFHLHNEQUFILEVBQTJELFNBQUE7QUFDekQsVUFBQTtNQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsS0FBWCxDQUFpQixDQUFDLFNBQWxCLENBQTRCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLEVBQWhCLENBQTVCO01BQ0EsSUFBQSxHQUFXLElBQUEsZ0JBQUEsQ0FBaUIsSUFBakIsRUFBdUIsQ0FBQyxVQUFELEVBQWEsWUFBYixDQUF2QjtNQUNYLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLFdBQVYsQ0FBc0IsQ0FBQyxNQUE5QixDQUFxQyxDQUFDLElBQXRDLENBQTJDLENBQTNDO01BQ0EsWUFBQSxHQUFlLElBQUksQ0FBQyxlQUFMLENBQUE7QUFDZixhQUFNLENBQUksWUFBWSxDQUFDLE1BQXZCO1FBQ0UsWUFBQSxHQUFlLElBQUksQ0FBQyxrQkFBTCxDQUFBO01BRGpCO01BRUEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxZQUFmLEVBQTZCLElBQUksQ0FBQyxtQkFBTCxDQUFBLENBQTdCO2FBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsV0FBVixDQUFzQixDQUFDLE1BQTlCLENBQXFDLENBQUMsSUFBdEMsQ0FBMkMsQ0FBM0M7SUFSeUQsQ0FBM0Q7SUFVQSxFQUFBLENBQUcsMkJBQUgsRUFBZ0MsU0FBQTtBQUM5QixVQUFBO01BQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsU0FBbEIsQ0FBNEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBNUI7TUFDQSxJQUFBLEdBQVcsSUFBQSxnQkFBQSxDQUFpQixJQUFqQixFQUF1QixDQUFDLFlBQUQsQ0FBdkI7TUFDWCxJQUFJLENBQUMsZ0JBQUwsQ0FBQTtNQUNBLElBQUksQ0FBQyxJQUFMLENBQVUsbUJBQVYsQ0FBOEIsQ0FBQyxLQUEvQixDQUFBO2FBQ0EsTUFBQSxDQUFPLEdBQUcsQ0FBQyxHQUFYLENBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsQ0FBQyxLQUFELEVBQVEsSUFBUixFQUFjLFlBQVksQ0FBQyxJQUEzQixDQUFyQyxFQUF1RTtRQUFBLEdBQUEsRUFBSyxJQUFJLENBQUMsbUJBQUwsQ0FBQSxDQUFMO09BQXZFO0lBTDhCLENBQWhDO1dBT0EsRUFBQSxDQUFHLDZCQUFILEVBQWtDLFNBQUE7QUFDaEMsVUFBQTtNQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsS0FBWCxDQUFpQixDQUFDLFNBQWxCLENBQTRCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLEVBQWhCLENBQTVCO01BQ0EsSUFBQSxHQUFXLElBQUEsZ0JBQUEsQ0FBaUIsSUFBakIsRUFBdUIsQ0FBQyxVQUFELENBQXZCO01BQ1gsSUFBSSxDQUFDLElBQUwsQ0FBVSxtQkFBVixDQUE4QixDQUFDLEtBQS9CLENBQUE7YUFDQSxNQUFBLENBQU8sR0FBRyxDQUFDLEdBQVgsQ0FBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWtCLElBQWxCLEVBQXdCLFVBQVUsQ0FBQyxJQUFuQyxDQUFyQyxFQUErRTtRQUFBLEdBQUEsRUFBSyxJQUFJLENBQUMsbUJBQUwsQ0FBQSxDQUFMO09BQS9FO0lBSmdDLENBQWxDO0VBdkIyQixDQUE3QjtBQVhBIiwic291cmNlc0NvbnRlbnQiOlsiZ2l0ID0gcmVxdWlyZSAnLi4vLi4vbGliL2dpdCdcblNlbGVjdFN0YWdlRmlsZXMgPSByZXF1aXJlICcuLi8uLi9saWIvdmlld3Mvc2VsZWN0LXN0YWdlLWZpbGVzLXZpZXctYmV0YSdcblxue3JlcG8sIHBhdGhUb1JlcG9GaWxlfSA9IHJlcXVpcmUgJy4uL2ZpeHR1cmVzJ1xuc3RhZ2VkRmlsZSA9XG4gIHN0YWdlZDogdHJ1ZVxuICBwYXRoOiBwYXRoVG9SZXBvRmlsZSArICcxJ1xudW5zdGFnZWRGaWxlID1cbiAgc3RhZ2VkOiBmYWxzZVxuICBwYXRoOiBwYXRoVG9SZXBvRmlsZVxuXG5kZXNjcmliZSBcIlNlbGVjdFN0YWdlRmlsZXNcIiwgLT5cbiAgaXQgXCJyZW5kZXJzIHN0YWdlZCBmaWxlcyB3aXRoIHRoZSBjc3MgY2xhc3MgJ2FjdGl2ZSdcIiwgLT5cbiAgICBzcHlPbihnaXQsICdjbWQnKS5hbmRSZXR1cm4gUHJvbWlzZS5yZXNvbHZlICcnXG4gICAgdmlldyA9IG5ldyBTZWxlY3RTdGFnZUZpbGVzKHJlcG8sIFtzdGFnZWRGaWxlLCB1bnN0YWdlZEZpbGVdKVxuICAgIGV4cGVjdCh2aWV3LmZpbmQoJ2xpLmFjdGl2ZScpLmxlbmd0aCkudG9CZSAxXG5cbiAgaXQgXCJ0b2dnbGVzIHN0YWdlZCBmaWxlcyBhbmQgdGhlaXIgY3NzIGNsYXNzIG9mICdhY3RpdmUnXCIsIC0+XG4gICAgc3B5T24oZ2l0LCAnY21kJykuYW5kUmV0dXJuIFByb21pc2UucmVzb2x2ZSAnJ1xuICAgIHZpZXcgPSBuZXcgU2VsZWN0U3RhZ2VGaWxlcyhyZXBvLCBbc3RhZ2VkRmlsZSwgdW5zdGFnZWRGaWxlXSlcbiAgICBleHBlY3Qodmlldy5maW5kKCdsaS5hY3RpdmUnKS5sZW5ndGgpLnRvQmUgMVxuICAgIHNlbGVjdGVkSXRlbSA9IHZpZXcuZ2V0U2VsZWN0ZWRJdGVtKClcbiAgICB3aGlsZSBub3Qgc2VsZWN0ZWRJdGVtLnN0YWdlZFxuICAgICAgc2VsZWN0ZWRJdGVtID0gdmlldy5zZWxlY3ROZXh0SXRlbVZpZXcoKVxuICAgIHZpZXcuY29uZmlybWVkKHNlbGVjdGVkSXRlbSwgdmlldy5nZXRTZWxlY3RlZEl0ZW1WaWV3KCkpXG4gICAgZXhwZWN0KHZpZXcuZmluZCgnbGkuYWN0aXZlJykubGVuZ3RoKS50b0JlIDBcblxuICBpdCBcInN0YWdlcyB0aGUgc2VsZWN0ZWQgZmlsZXNcIiwgLT5cbiAgICBzcHlPbihnaXQsICdjbWQnKS5hbmRSZXR1cm4gUHJvbWlzZS5yZXNvbHZlICcnXG4gICAgdmlldyA9IG5ldyBTZWxlY3RTdGFnZUZpbGVzKHJlcG8sIFt1bnN0YWdlZEZpbGVdKVxuICAgIHZpZXcuY29uZmlybVNlbGVjdGlvbigpXG4gICAgdmlldy5maW5kKCcuYnRuLWFwcGx5LWJ1dHRvbicpLmNsaWNrKClcbiAgICBleHBlY3QoZ2l0LmNtZCkudG9IYXZlQmVlbkNhbGxlZFdpdGggWydhZGQnLCAnLWYnLCB1bnN0YWdlZEZpbGUucGF0aF0sIGN3ZDogcmVwby5nZXRXb3JraW5nRGlyZWN0b3J5KClcblxuICBpdCBcInVuc3RhZ2VzIHRoZSBzZWxlY3RlZCBmaWxlc1wiLCAtPlxuICAgIHNweU9uKGdpdCwgJ2NtZCcpLmFuZFJldHVybiBQcm9taXNlLnJlc29sdmUgJydcbiAgICB2aWV3ID0gbmV3IFNlbGVjdFN0YWdlRmlsZXMocmVwbywgW3N0YWdlZEZpbGVdKVxuICAgIHZpZXcuZmluZCgnLmJ0bi1hcHBseS1idXR0b24nKS5jbGljaygpXG4gICAgZXhwZWN0KGdpdC5jbWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoIFsncmVzZXQnLCAnSEVBRCcsICctLScsIHN0YWdlZEZpbGUucGF0aF0sIGN3ZDogcmVwby5nZXRXb3JraW5nRGlyZWN0b3J5KClcbiJdfQ==
