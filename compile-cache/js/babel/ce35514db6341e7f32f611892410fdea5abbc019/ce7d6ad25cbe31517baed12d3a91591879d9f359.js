'use babel';
var git = require('../../lib/git');
var GitCheckoutBranch = require('../../lib/models/git-checkout-branch');

var _require = require('../fixtures');

var repo = _require.repo;

var cwd = repo.getWorkingDirectory();

describe("GitCheckoutBranch", function () {
  beforeEach(function () {
    spyOn(atom.workspace, 'addModalPanel').andCallThrough();
    spyOn(git, 'cmd').andReturn(Promise.resolve('branch1\nbranch2'));
  });

  describe("when the remote option is false", function () {
    it("gets a list of the repo's branches", function () {
      waitsForPromise(function () {
        return GitCheckoutBranch(repo);
      });
      runs(function () {
        expect(git.cmd).toHaveBeenCalledWith(['branch', '--no-color'], { cwd: cwd });
        expect(atom.workspace.addModalPanel).toHaveBeenCalled();
      });
    });
  });

  describe("when the remote option is true", function () {
    it("gets a list of the repo's remote branches", function () {
      waitsForPromise(function () {
        return GitCheckoutBranch(repo, { remote: true });
      });
      runs(function () {
        expect(git.cmd).toHaveBeenCalledWith(['branch', '-r', '--no-color'], { cwd: cwd });
        expect(atom.workspace.addModalPanel).toHaveBeenCalled();
      });
    });
  });

  it("checkouts the selected branch", function () {
    waitsForPromise(function () {
      return GitCheckoutBranch(repo, { remote: true }).then(function (view) {
        return view.confirmSelection();
      });
    });
    runs(function () {
      expect(git.cmd).toHaveBeenCalledWith(['checkout', 'branch1', '--track'], { cwd: cwd });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9scmFtaXJlei8uYXRvbS9wYWNrYWdlcy9naXQtcGx1cy9zcGVjL21vZGVscy9naXQtY2hlY2tvdXQtYnJhbmNoLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFBO0FBQ1gsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQ3BDLElBQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7O2VBRTFELE9BQU8sQ0FBQyxhQUFhLENBQUM7O0lBQTlCLElBQUksWUFBSixJQUFJOztBQUNYLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFBOztBQUV0QyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtBQUNsQyxZQUFVLENBQUMsWUFBTTtBQUNmLFNBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFBO0FBQ3ZELFNBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFBO0dBQ2pFLENBQUMsQ0FBQTs7QUFFRixVQUFRLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtBQUNoRCxNQUFFLENBQUMsb0NBQW9DLEVBQUUsWUFBTTtBQUM3QyxxQkFBZSxDQUFDO2VBQU0saUJBQWlCLENBQUMsSUFBSSxDQUFDO09BQUEsQ0FBQyxDQUFBO0FBQzlDLFVBQUksQ0FBQyxZQUFNO0FBQ1QsY0FBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsRUFBRSxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUMsQ0FBQyxDQUFBO0FBQ3JFLGNBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7T0FDeEQsQ0FBQyxDQUFBO0tBQ0gsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBOztBQUVGLFVBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNO0FBQy9DLE1BQUUsQ0FBQywyQ0FBMkMsRUFBRSxZQUFNO0FBQ3BELHFCQUFlLENBQUM7ZUFBTSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7T0FBQSxDQUFDLENBQUE7QUFDOUQsVUFBSSxDQUFDLFlBQU07QUFDVCxjQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUMsQ0FBQyxDQUFBO0FBQzNFLGNBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7T0FDeEQsQ0FBQyxDQUFBO0tBQ0gsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBOztBQUVGLElBQUUsQ0FBQywrQkFBK0IsRUFBRSxZQUFNO0FBQ3hDLG1CQUFlLENBQUM7YUFBTSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO2VBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO09BQUEsQ0FBQztLQUFBLENBQUMsQ0FBQTtBQUNwRyxRQUFJLENBQUMsWUFBTTtBQUNULFlBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFILEdBQUcsRUFBQyxDQUFDLENBQUE7S0FDaEYsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBO0NBQ0gsQ0FBQyxDQUFBIiwiZmlsZSI6Ii9Vc2Vycy9scmFtaXJlei8uYXRvbS9wYWNrYWdlcy9naXQtcGx1cy9zcGVjL21vZGVscy9naXQtY2hlY2tvdXQtYnJhbmNoLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuY29uc3QgZ2l0ID0gcmVxdWlyZSgnLi4vLi4vbGliL2dpdCcpXG5jb25zdCBHaXRDaGVja291dEJyYW5jaCA9IHJlcXVpcmUoJy4uLy4uL2xpYi9tb2RlbHMvZ2l0LWNoZWNrb3V0LWJyYW5jaCcpXG5cbmNvbnN0IHtyZXBvfSA9IHJlcXVpcmUoJy4uL2ZpeHR1cmVzJylcbmNvbnN0IGN3ZCA9IHJlcG8uZ2V0V29ya2luZ0RpcmVjdG9yeSgpXG5cbmRlc2NyaWJlKFwiR2l0Q2hlY2tvdXRCcmFuY2hcIiwgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzcHlPbihhdG9tLndvcmtzcGFjZSwgJ2FkZE1vZGFsUGFuZWwnKS5hbmRDYWxsVGhyb3VnaCgpXG4gICAgc3B5T24oZ2l0LCAnY21kJykuYW5kUmV0dXJuKFByb21pc2UucmVzb2x2ZSgnYnJhbmNoMVxcbmJyYW5jaDInKSlcbiAgfSlcblxuICBkZXNjcmliZShcIndoZW4gdGhlIHJlbW90ZSBvcHRpb24gaXMgZmFsc2VcIiwgKCkgPT4ge1xuICAgIGl0KFwiZ2V0cyBhIGxpc3Qgb2YgdGhlIHJlcG8ncyBicmFuY2hlc1wiLCAoKSA9PiB7XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4gR2l0Q2hlY2tvdXRCcmFuY2gocmVwbykpXG4gICAgICBydW5zKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGdpdC5jbWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnYnJhbmNoJywgJy0tbm8tY29sb3InXSwge2N3ZH0pXG4gICAgICAgIGV4cGVjdChhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZShcIndoZW4gdGhlIHJlbW90ZSBvcHRpb24gaXMgdHJ1ZVwiLCAoKSA9PiB7XG4gICAgaXQoXCJnZXRzIGEgbGlzdCBvZiB0aGUgcmVwbydzIHJlbW90ZSBicmFuY2hlc1wiLCAoKSA9PiB7XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4gR2l0Q2hlY2tvdXRCcmFuY2gocmVwbywge3JlbW90ZTogdHJ1ZX0pKVxuICAgICAgcnVucygoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnaXQuY21kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ2JyYW5jaCcsICctcicsICctLW5vLWNvbG9yJ10sIHtjd2R9KVxuICAgICAgICBleHBlY3QoYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoXCJjaGVja291dHMgdGhlIHNlbGVjdGVkIGJyYW5jaFwiLCAoKSA9PiB7XG4gICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IEdpdENoZWNrb3V0QnJhbmNoKHJlcG8sIHtyZW1vdGU6IHRydWV9KS50aGVuKHZpZXcgPT4gdmlldy5jb25maXJtU2VsZWN0aW9uKCkpKVxuICAgIHJ1bnMoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdpdC5jbWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnY2hlY2tvdXQnLCAnYnJhbmNoMScsICctLXRyYWNrJ10sIHtjd2R9KVxuICAgIH0pXG4gIH0pXG59KVxuIl19