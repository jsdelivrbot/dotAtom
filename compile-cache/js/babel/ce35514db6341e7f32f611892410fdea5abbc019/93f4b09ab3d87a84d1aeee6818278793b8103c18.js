'use babel';

/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module atom:linter-markdown:config
 * @fileoverview Configuration loaded into the engine.
 */

/* eslint-disable import/no-extraneous-dependencies, import/no-unresolved */
var CompositeDisposable = require('atom').CompositeDisposable;
var path = require('path');

var consistent = require.resolve('remark-preset-lint-consistent');
var recommended = require.resolve('remark-preset-lint-recommended');

var subscriptions = undefined;
var presetConsistentWithoutConfig = undefined;
var presetRecommendedWithoutConfig = undefined;

function configure(config) {
  var current = config.plugins || {};
  var plugins = {};
  var presets = [];
  var configured = undefined;

  Object.keys(current).forEach(function (filePath) {
    if (path.basename(path.dirname(filePath)) === 'remark-lint' || filePath === 'remark-lint' || filePath === 'lint') {
      configured = true;
    } else {
      /* Turn off other plug-ins. */
      plugins[filePath] = false;
    }
  });

  /* Found no config for `remark-lint`, set presets. */
  if (!configured) {
    if (presetRecommendedWithoutConfig) {
      presets.push(recommended);
    }

    if (presetConsistentWithoutConfig) {
      presets.push(consistent);
    }
  }

  return { presets: presets, plugins: plugins };
}

function on() {
  subscriptions = new CompositeDisposable();

  subscriptions.add(atom.config.observe('linter-markdown.presetRecommendedWithoutConfig', function (value) {
    presetRecommendedWithoutConfig = value;
  }));

  subscriptions.add(atom.config.observe('linter-markdown.presetConsistentWithoutConfig', function (value) {
    presetConsistentWithoutConfig = value;
  }));
}

function off() {
  subscriptions.dispose();
}

module.exports = configure;

configure.on = on;
configure.off = off;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9scmFtaXJlei8uYXRvbS9wYWNrYWdlcy9saW50ZXItbWFya2Rvd24vbGliL2NvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7O0FBV1osSUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsbUJBQW1CLENBQUM7QUFDaEUsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUU3QixJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDcEUsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDOztBQUV0RSxJQUFJLGFBQWEsWUFBQSxDQUFDO0FBQ2xCLElBQUksNkJBQTZCLFlBQUEsQ0FBQztBQUNsQyxJQUFJLDhCQUE4QixZQUFBLENBQUM7O0FBRW5DLFNBQVMsU0FBUyxDQUFDLE1BQU0sRUFBRTtBQUN6QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztBQUNyQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDbkIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ25CLE1BQUksVUFBVSxZQUFBLENBQUM7O0FBRWYsUUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFRLEVBQUs7QUFDekMsUUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxhQUFhLElBQ3ZELFFBQVEsS0FBSyxhQUFhLElBQzFCLFFBQVEsS0FBSyxNQUFNLEVBQ25CO0FBQ0EsZ0JBQVUsR0FBRyxJQUFJLENBQUM7S0FDbkIsTUFBTTs7QUFFTCxhQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQzNCO0dBQ0YsQ0FBQyxDQUFDOzs7QUFHSCxNQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsUUFBSSw4QkFBOEIsRUFBRTtBQUNsQyxhQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzNCOztBQUVELFFBQUksNkJBQTZCLEVBQUU7QUFDakMsYUFBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUMxQjtHQUNGOztBQUVELFNBQU8sRUFBRSxPQUFPLEVBQVAsT0FBTyxFQUFFLE9BQU8sRUFBUCxPQUFPLEVBQUUsQ0FBQztDQUM3Qjs7QUFFRCxTQUFTLEVBQUUsR0FBRztBQUNaLGVBQWEsR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7O0FBRTFDLGVBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0RBQWdELEVBQUUsVUFBQyxLQUFLLEVBQUs7QUFDakcsa0NBQThCLEdBQUcsS0FBSyxDQUFDO0dBQ3hDLENBQUMsQ0FBQyxDQUFDOztBQUVKLGVBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsK0NBQStDLEVBQUUsVUFBQyxLQUFLLEVBQUs7QUFDaEcsaUNBQTZCLEdBQUcsS0FBSyxDQUFDO0dBQ3ZDLENBQUMsQ0FBQyxDQUFDO0NBQ0w7O0FBRUQsU0FBUyxHQUFHLEdBQUc7QUFDYixlQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7Q0FDekI7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7O0FBRTNCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9scmFtaXJlei8uYXRvbS9wYWNrYWdlcy9saW50ZXItbWFya2Rvd24vbGliL2NvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG4vKipcbiAqIEBhdXRob3IgVGl0dXMgV29ybWVyXG4gKiBAY29weXJpZ2h0IDIwMTYgVGl0dXMgV29ybWVyXG4gKiBAbGljZW5zZSBNSVRcbiAqIEBtb2R1bGUgYXRvbTpsaW50ZXItbWFya2Rvd246Y29uZmlnXG4gKiBAZmlsZW92ZXJ2aWV3IENvbmZpZ3VyYXRpb24gbG9hZGVkIGludG8gdGhlIGVuZ2luZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMsIGltcG9ydC9uby11bnJlc29sdmVkICovXG5jb25zdCBDb21wb3NpdGVEaXNwb3NhYmxlID0gcmVxdWlyZSgnYXRvbScpLkNvbXBvc2l0ZURpc3Bvc2FibGU7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBjb25zaXN0ZW50ID0gcmVxdWlyZS5yZXNvbHZlKCdyZW1hcmstcHJlc2V0LWxpbnQtY29uc2lzdGVudCcpO1xuY29uc3QgcmVjb21tZW5kZWQgPSByZXF1aXJlLnJlc29sdmUoJ3JlbWFyay1wcmVzZXQtbGludC1yZWNvbW1lbmRlZCcpO1xuXG5sZXQgc3Vic2NyaXB0aW9ucztcbmxldCBwcmVzZXRDb25zaXN0ZW50V2l0aG91dENvbmZpZztcbmxldCBwcmVzZXRSZWNvbW1lbmRlZFdpdGhvdXRDb25maWc7XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgY29uc3QgY3VycmVudCA9IGNvbmZpZy5wbHVnaW5zIHx8IHt9O1xuICBjb25zdCBwbHVnaW5zID0ge307XG4gIGNvbnN0IHByZXNldHMgPSBbXTtcbiAgbGV0IGNvbmZpZ3VyZWQ7XG5cbiAgT2JqZWN0LmtleXMoY3VycmVudCkuZm9yRWFjaCgoZmlsZVBhdGgpID0+IHtcbiAgICBpZiAoXG4gICAgICBwYXRoLmJhc2VuYW1lKHBhdGguZGlybmFtZShmaWxlUGF0aCkpID09PSAncmVtYXJrLWxpbnQnIHx8XG4gICAgICBmaWxlUGF0aCA9PT0gJ3JlbWFyay1saW50JyB8fFxuICAgICAgZmlsZVBhdGggPT09ICdsaW50J1xuICAgICkge1xuICAgICAgY29uZmlndXJlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIFR1cm4gb2ZmIG90aGVyIHBsdWctaW5zLiAqL1xuICAgICAgcGx1Z2luc1tmaWxlUGF0aF0gPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qIEZvdW5kIG5vIGNvbmZpZyBmb3IgYHJlbWFyay1saW50YCwgc2V0IHByZXNldHMuICovXG4gIGlmICghY29uZmlndXJlZCkge1xuICAgIGlmIChwcmVzZXRSZWNvbW1lbmRlZFdpdGhvdXRDb25maWcpIHtcbiAgICAgIHByZXNldHMucHVzaChyZWNvbW1lbmRlZCk7XG4gICAgfVxuXG4gICAgaWYgKHByZXNldENvbnNpc3RlbnRXaXRob3V0Q29uZmlnKSB7XG4gICAgICBwcmVzZXRzLnB1c2goY29uc2lzdGVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgcHJlc2V0cywgcGx1Z2lucyB9O1xufVxuXG5mdW5jdGlvbiBvbigpIHtcbiAgc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG5cbiAgc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb25maWcub2JzZXJ2ZSgnbGludGVyLW1hcmtkb3duLnByZXNldFJlY29tbWVuZGVkV2l0aG91dENvbmZpZycsICh2YWx1ZSkgPT4ge1xuICAgIHByZXNldFJlY29tbWVuZGVkV2l0aG91dENvbmZpZyA9IHZhbHVlO1xuICB9KSk7XG5cbiAgc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb25maWcub2JzZXJ2ZSgnbGludGVyLW1hcmtkb3duLnByZXNldENvbnNpc3RlbnRXaXRob3V0Q29uZmlnJywgKHZhbHVlKSA9PiB7XG4gICAgcHJlc2V0Q29uc2lzdGVudFdpdGhvdXRDb25maWcgPSB2YWx1ZTtcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBvZmYoKSB7XG4gIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZ3VyZTtcblxuY29uZmlndXJlLm9uID0gb247XG5jb25maWd1cmUub2ZmID0gb2ZmO1xuIl19